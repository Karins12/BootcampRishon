<!DOCTYPE html>
<html lang="en">

<%- include('./partials/head') %>
<head>
    <style>
        :root {
            --pinSize: 35px;
            --cardSpacing: 40px;
            --cardHeight: 60px;

            --lineContainerWidth: 100px;
            --placeListWidth: 310px;

            --grayColor: #dfdfdf;
            --lineColor: #babec6;
            
        }
        .container{
            display:flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        .place{
            position:relative;
            display:flex;
            flex-direction: row;
            align-items: center;
            justify-content: space-between;
            width: 100%;
            margin-bottom: var(--cardSpacing);
            margin-top: 20px;
        }
        .linecontainer{
            width:var(--lineContainerWidth);
            position:absolute;
            top:calc(50% + var(--pinSize)/2);
            left:calc(100% - var(--pinSize)/2 - 1.5px);
            display:flex;
            flex-direction: row;
            align-items: center;
            height: calc(var(--cardSpacing) + var(--cardHeight) - var(--pinSize));
        }
        .line{
            width:3px;
            background-color: var(--lineColor);
            height: 100%;
        }
        .card{
            text-align: center;
            display:flex;
            justify-content: center;
            align-content:center;
            align-items:center;
            width: calc(var(--placeListWidth) - 60px);
            height: var(--cardHeight);
            border-radius: 20px;
            background-color: var(--grayColor);
            padding: 5px 5px;
        }
        .locationPin{
            width: var(--pinSize);
            height: var(--pinSize);
            z-index: 2;
        }
        .textInside{
            width:90%;
            height:auto;
            text-align: center;
            font-size:1.4em;
            font-weight: 500;
            margin: 0;
            
        }
        .distanceText{
            text-align: left;
            direction: rtl;
            margin-left: 20px;
            width: 100px;
            font-size: 100%;
            font-weight: 400;
        }
        .places{
            width:var(--placeListWidth)
        }
        .placeHeader{
            direction: rtl;
            font-size: 1.5em;
            margin-right: calc(0px - 1 * var(--pinSize));
            font-weight: 400;
        }
        .button:hover{
            background-color: hsl(0, 0%, 50%);
            color:white;
        }
        .button{
            margin-top: 80px;
            width:200px
        }
    </style>
</head>
<body>
    <%- include('./partials/navbar', {currentPage: 'list view'}) %>

    <div class="container">
        <br><br>
        <h1 id="name"></h1>

        <div class="places">
            <h1 class="placeHeader">תחנות</h1>
            <div id="placeList"></div>
        </div>
        <button id="backButton" class="card button">
            <h1 class="textInside">חזרה למפה</h1>
        </button>
    </div>

    <script>
        const nameText = document.getElementById("name")
        const placesDiv = document.getElementById("placeList")
        const back = document.getElementById("backButton")

        const ID = "670f90813ad3b9ca711932c4";

        const PROTOCOL = window.location.protocol
        const URL = `${PROTOCOL}/api/v1/routes/${ID}`

        const locationPin = () => {
            return `
                <svg class="locationPin" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-geo-alt-fill" viewBox="0 0 16 16">
                    <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10m0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6"/>
                </svg>
            `
        }

        const toRadians = (degrees) => degrees * (Math.PI / 180);

        const haversine = (lat1, lon1, lat2, lon2) => {
            const R = 6371000;
            
            console.log(lat1, lon1)
            console.log(lat2, lon2)

            const x1 = lat2 - lat1;
            const dLat = toRadians(x1);  
            const x2 = lon2 - lon1;
            const dLon = toRadians(x2);  
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) + 
                            Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * 
                            Math.sin(dLon/2) * Math.sin(dLon/2);  
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
            const d = R * c; 

            return d
        }

        const formulateDistance = (distanceMeters) => {
            if (distanceMeters >= 1000) {
                const km = (distanceMeters / 1000).toFixed(1);
                return `${km} ק"מ`;
            } else{ // if(distanceMeters >= 50) {
                return `${Math.round(distanceMeters)} מ'`;
            // }else{
            //     return ""
            }
        }

        const getDistance = (place1, place2) => {
            const lat1 = place1.coordinates.latitude
            const lon1 = place1.coordinates.longitude

            const lat2 = place2.coordinates.latitude
            const lon2 = place2.coordinates.longitude
            distance = haversine(lat1, lon1, lat2, lon2)
            console.log(distance)
            return formulateDistance(distance)
        }

        const line = (place1, place2) =>{
            return `
                <div class="linecontainer">
                    <div class="line"></div>
                    <h1 class="distanceText">${getDistance(place1, place2)}</h1>
                </div>

            `
        }

        const placeDiv = (place, addLine, place2) => {
            console.log(place2)
            return `
                <div class="place">
                    <div class="card">
                        <h1 class="textInside">${place.name}</h1>
                    </div>
                    ${locationPin()}
                    ${addLine ? line(place, place2) : ""} 
                </div>
            `
        }

        const addToView = (data) => {
            nameText.textContent = data.name

            for(let index in data.places){
                index = parseInt(index)
                const place = data.places[index]

                placesDiv.innerHTML += placeDiv(place, index < data.places.length - 1, data.places[index + 1]);        
            }
        }

        const fetchPlace = async () => {
            try{
                const response = await fetch(URL)
                const data = await response.json()

                return data
            }catch(err){
                throw new Error(err)
                return {}
            }
        }

        fetchPlace().then(addToView)

        back.addEventListener("click", () => {
            window.location.href = "/map"
        })
    </script>
</body>
</html>